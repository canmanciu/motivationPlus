# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeviceExtension(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sys_lang: str=None, phone_no: str=None, carrier: str=None, wifi_ssid: str=None):  # noqa: E501
        """DeviceExtension - a model defined in Swagger

        :param sys_lang: The sys_lang of this DeviceExtension.  # noqa: E501
        :type sys_lang: str
        :param phone_no: The phone_no of this DeviceExtension.  # noqa: E501
        :type phone_no: str
        :param carrier: The carrier of this DeviceExtension.  # noqa: E501
        :type carrier: str
        :param wifi_ssid: The wifi_ssid of this DeviceExtension.  # noqa: E501
        :type wifi_ssid: str
        """
        self.swagger_types = {
            'sys_lang': str,
            'phone_no': str,
            'carrier': str,
            'wifi_ssid': str
        }

        self.attribute_map = {
            'sys_lang': 'sysLang',
            'phone_no': 'phoneNo',
            'carrier': 'carrier',
            'wifi_ssid': 'wifiSsid'
        }
        self._sys_lang = sys_lang
        self._phone_no = phone_no
        self._carrier = carrier
        self._wifi_ssid = wifi_ssid

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device_extension of this DeviceExtension.  # noqa: E501
        :rtype: DeviceExtension
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sys_lang(self) -> str:
        """Gets the sys_lang of this DeviceExtension.

        系统语言  # noqa: E501

        :return: The sys_lang of this DeviceExtension.
        :rtype: str
        """
        return self._sys_lang

    @sys_lang.setter
    def sys_lang(self, sys_lang: str):
        """Sets the sys_lang of this DeviceExtension.

        系统语言  # noqa: E501

        :param sys_lang: The sys_lang of this DeviceExtension.
        :type sys_lang: str
        """

        self._sys_lang = sys_lang

    @property
    def phone_no(self) -> str:
        """Gets the phone_no of this DeviceExtension.

        系统语言  # noqa: E501

        :return: The phone_no of this DeviceExtension.
        :rtype: str
        """
        return self._phone_no

    @phone_no.setter
    def phone_no(self, phone_no: str):
        """Sets the phone_no of this DeviceExtension.

        系统语言  # noqa: E501

        :param phone_no: The phone_no of this DeviceExtension.
        :type phone_no: str
        """

        self._phone_no = phone_no

    @property
    def carrier(self) -> str:
        """Gets the carrier of this DeviceExtension.

        运营商  # noqa: E501

        :return: The carrier of this DeviceExtension.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier: str):
        """Sets the carrier of this DeviceExtension.

        运营商  # noqa: E501

        :param carrier: The carrier of this DeviceExtension.
        :type carrier: str
        """
        allowed_values = ["dianxin", "yidong", "liantong"]  # noqa: E501
        if carrier not in allowed_values:
            raise ValueError(
                "Invalid value for `carrier` ({0}), must be one of {1}"
                .format(carrier, allowed_values)
            )

        self._carrier = carrier

    @property
    def wifi_ssid(self) -> str:
        """Gets the wifi_ssid of this DeviceExtension.

        无线网id  # noqa: E501

        :return: The wifi_ssid of this DeviceExtension.
        :rtype: str
        """
        return self._wifi_ssid

    @wifi_ssid.setter
    def wifi_ssid(self, wifi_ssid: str):
        """Sets the wifi_ssid of this DeviceExtension.

        无线网id  # noqa: E501

        :param wifi_ssid: The wifi_ssid of this DeviceExtension.
        :type wifi_ssid: str
        """

        self._wifi_ssid = wifi_ssid
