# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.device_extension import DeviceExtension  # noqa: F401,E501
from swagger_server import util


class Device(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_id: str=None, system: str=None, branch: str=None, system_version: str=None, name: str=None, application_id: str=None, extension: DeviceExtension=None):  # noqa: E501
        """Device - a model defined in Swagger

        :param device_id: The device_id of this Device.  # noqa: E501
        :type device_id: str
        :param system: The system of this Device.  # noqa: E501
        :type system: str
        :param branch: The branch of this Device.  # noqa: E501
        :type branch: str
        :param system_version: The system_version of this Device.  # noqa: E501
        :type system_version: str
        :param name: The name of this Device.  # noqa: E501
        :type name: str
        :param application_id: The application_id of this Device.  # noqa: E501
        :type application_id: str
        :param extension: The extension of this Device.  # noqa: E501
        :type extension: DeviceExtension
        """
        self.swagger_types = {
            'device_id': str,
            'system': str,
            'branch': str,
            'system_version': str,
            'name': str,
            'application_id': str,
            'extension': DeviceExtension
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'system': 'system',
            'branch': 'branch',
            'system_version': 'systemVersion',
            'name': 'name',
            'application_id': 'applicationId',
            'extension': 'extension'
        }
        self._device_id = device_id
        self._system = system
        self._branch = branch
        self._system_version = system_version
        self._name = name
        self._application_id = application_id
        self._extension = extension

    @classmethod
    def from_dict(cls, dikt) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device of this Device.  # noqa: E501
        :rtype: Device
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> str:
        """Gets the device_id of this Device.

        设备唯一id，如 iOS 的 idfv  # noqa: E501

        :return: The device_id of this Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this Device.

        设备唯一id，如 iOS 的 idfv  # noqa: E501

        :param device_id: The device_id of this Device.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def system(self) -> str:
        """Gets the system of this Device.

        系统名称  # noqa: E501

        :return: The system of this Device.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system: str):
        """Sets the system of this Device.

        系统名称  # noqa: E501

        :param system: The system of this Device.
        :type system: str
        """
        allowed_values = ["ios", "android", "windows", "mac", "linux", "browser"]  # noqa: E501
        if system not in allowed_values:
            raise ValueError(
                "Invalid value for `system` ({0}), must be one of {1}"
                .format(system, allowed_values)
            )

        self._system = system

    @property
    def branch(self) -> str:
        """Gets the branch of this Device.

        品牌  # noqa: E501

        :return: The branch of this Device.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch: str):
        """Sets the branch of this Device.

        品牌  # noqa: E501

        :param branch: The branch of this Device.
        :type branch: str
        """
        allowed_values = ["apple", "xiaomi", "vivo"]  # noqa: E501
        if branch not in allowed_values:
            raise ValueError(
                "Invalid value for `branch` ({0}), must be one of {1}"
                .format(branch, allowed_values)
            )

        self._branch = branch

    @property
    def system_version(self) -> str:
        """Gets the system_version of this Device.

        系统版本  # noqa: E501

        :return: The system_version of this Device.
        :rtype: str
        """
        return self._system_version

    @system_version.setter
    def system_version(self, system_version: str):
        """Sets the system_version of this Device.

        系统版本  # noqa: E501

        :param system_version: The system_version of this Device.
        :type system_version: str
        """

        self._system_version = system_version

    @property
    def name(self) -> str:
        """Gets the name of this Device.

        设备名称  # noqa: E501

        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Device.

        设备名称  # noqa: E501

        :param name: The name of this Device.
        :type name: str
        """

        self._name = name

    @property
    def application_id(self) -> str:
        """Gets the application_id of this Device.

        应用id  # noqa: E501

        :return: The application_id of this Device.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id: str):
        """Sets the application_id of this Device.

        应用id  # noqa: E501

        :param application_id: The application_id of this Device.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def extension(self) -> DeviceExtension:
        """Gets the extension of this Device.


        :return: The extension of this Device.
        :rtype: DeviceExtension
        """
        return self._extension

    @extension.setter
    def extension(self, extension: DeviceExtension):
        """Sets the extension of this Device.


        :param extension: The extension of this Device.
        :type extension: DeviceExtension
        """

        self._extension = extension
